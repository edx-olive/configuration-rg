---
#
# edX Configuration
#
# github:     https://github.com/edx/configuration
# wiki:       https://openedx.atlassian.net/wiki/display/OpenOPS
# code style: https://openedx.atlassian.net/wiki/display/OpenOPS/Ansible+Code+Conventions
# license:    https://github.com/edx/configuration/blob/master/LICENSE.TXT
#
##
# Defaults for role credentials
#
CREDENTIALS_GIT_IDENTITY: !!null

CREDENTIALS_REPOS:
  - PROTOCOL: "{{ COMMON_GIT_PROTOCOL }}"
    DOMAIN: "{{ COMMON_GIT_MIRROR }}"
    PATH: "{{ COMMON_GIT_PATH }}"
    REPO: "credentials.git"
    VERSION: "{{ CREDENTIALS_VERSION }}"
    DESTINATION: "{{ credentials_code_dir }}"
    SSH_KEY: "{{ CREDENTIALS_GIT_IDENTITY }}"

#
# vars are namespace with the module name.
#
credentials_service_name: 'credentials'
credentials_user: "{{ credentials_service_name }}"
credentials_home: "{{ COMMON_APP_DIR }}/{{ credentials_service_name }}"
credentials_code_dir: "{{ credentials_home }}/{{ credentials_service_name }}"
credentials_venv_dir: "{{ credentials_home }}/venvs/{{ credentials_service_name }}"

credentials_environment:
  CREDENTIALS_CFG: '{{ COMMON_CFG_DIR }}/{{ credentials_service_name }}.yml'

credentials_gunicorn_port: 8150
CREDENTIALS_NODE_VERSION: '12.11.1'

#
# OS packages
#

credentials_debian_pkgs:
  # Needed to manipulate images.
  - libjpeg8-dev

credentials_release_specific_debian_pkgs:
  xenial:
    - libpng12-dev
  bionic:
    - libpng-dev
  focal:
    - libpng-dev

credentials_redhat_pkgs: []

CREDENTIALS_NGINX_PORT: '1{{ credentials_gunicorn_port }}'
CREDENTIALS_SSL_NGINX_PORT: '4{{ credentials_gunicorn_port }}'

CREDENTIALS_DEFAULT_DB_NAME: 'credentials'
CREDENTIALS_MYSQL_HOST: 'localhost'
# MySQL usernames are limited to 16 characters
CREDENTIALS_MYSQL_USER: 'credentials001'
CREDENTIALS_MYSQL_PASSWORD: 'password'
CREDENTIALS_MYSQL_CONN_MAX_AGE: 60

CREDENTIALS_MEMCACHE: [ 'memcache' ]

CREDENTIALS_DJANGO_SETTINGS_MODULE: 'credentials.settings.production'
CREDENTIALS_DOMAIN: 'credentials'
CREDENTIALS_URL_ROOT: 'http://{{ CREDENTIALS_DOMAIN }}:{{ CREDENTIALS_NGINX_PORT }}'
CREDENTIALS_LOGOUT_URL: '{{ CREDENTIALS_URL_ROOT }}/logout/'

CREDENTIALS_SECRET_KEY: 'SET-ME-TO-A-UNIQUE-LONG-RANDOM-STRING'
CREDENTIALS_LANGUAGE_CODE: 'en'
CREDENTIALS_LANGUAGE_COOKIE_NAME: 'openedx-language-preference'

# Used to automatically configure OAuth2 Client
CREDENTIALS_SOCIAL_AUTH_EDX_OAUTH2_KEY: 'credentials-sso-key'
CREDENTIALS_SOCIAL_AUTH_EDX_OAUTH2_SECRET: 'credentials-sso-secret'
CREDENTIALS_BACKEND_SERVICE_EDX_OAUTH2_KEY: 'credentials-backend-service-key'
CREDENTIALS_BACKEND_SERVICE_EDX_OAUTH2_SECRET: 'credentials-backend-service-secret'
CREDENTIALS_SOCIAL_AUTH_REDIRECT_IS_HTTPS: false

CREDENTIALS_SERVICE_USER: 'credentials_service_user'

CREDENTIALS_DATA_DIR: '{{ COMMON_DATA_DIR }}/{{ credentials_service_name }}'

# TODO: Let edx_django_service manage CREDENTIALS_STATIC_ROOT in phase 2.
CREDENTIALS_STATIC_ROOT: '{{ CREDENTIALS_DATA_DIR }}/staticfiles'

CREDENTIALS_MEDIA_ROOT: '{{ CREDENTIALS_DATA_DIR }}/media'
CREDENTIALS_MEDIA_URL: '/media/'
CREDENTIALS_STATIC_URL: '/static/'

CREDENTIALS_MEDIA_STORAGE_BACKEND:
  DEFAULT_FILE_STORAGE: 'django.core.files.storage.FileSystemStorage'
  MEDIA_ROOT: '{{ CREDENTIALS_MEDIA_ROOT }}'
  MEDIA_URL: '{{ CREDENTIALS_MEDIA_URL }}'

# NOTE: This service is one of the few that stores its static files on S3. We use a backend that adds a hash to the
# filename to avoid overwriting older files, which may be in use, with newer files during deployments. See
# https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#manifeststaticfilesstorage for more information.
CREDENTIALS_STATICFILES_STORAGE: 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'

# NOTE: This only needs to be overridden when using non-local storage. Otherwise, the edx_django_service play will
# properly configure local storage of media and static files.
CREDENTIALS_FILE_STORAGE_BACKEND: {}


CREDENTIALS_CORS_ORIGIN_ALLOW_ALL: false
CREDENTIALS_CORS_ORIGIN_WHITELIST_DEFAULT:
 - '{{ CREDENTIALS_DOMAIN }}'

CREDENTIALS_CORS_ORIGIN_WHITELIST_EXTRA: []
CREDENTIALS_CORS_ORIGIN_WHITELIST: '{{ CREDENTIALS_CORS_ORIGIN_WHITELIST_DEFAULT + CREDENTIALS_CORS_ORIGIN_WHITELIST_EXTRA }}'

CREDENTIALS_VERSION: 'master'

CREDENTIALS_GUNICORN_EXTRA: ''

CREDENTIALS_EXTRA_APPS:
  - 'credentials.apps.edx_credentials_extensions'

CREDENTIALS_SESSION_EXPIRE_AT_BROWSER_CLOSE: false

CREDENTIALS_CERTIFICATE_LANGUAGES:
  'en': 'English'
  'es_419': 'Spanish'

CREDENTIALS_USERNAME_REPLACEMENT_WORKER: "OVERRIDE THIS WITH A VALID USERNAME"

credentials_service_config_overrides:
  CERTIFICATE_LANGUAGES: '{{ CREDENTIALS_CERTIFICATE_LANGUAGES }}'
  CREDENTIALS_SERVICE_USER: '{{ CREDENTIALS_SERVICE_USER }}'
  FILE_STORAGE_BACKEND: '{{ CREDENTIALS_FILE_STORAGE_BACKEND }}'
  LANGUAGE_COOKIE_NAME: '{{ CREDENTIALS_LANGUAGE_COOKIE_NAME }}'
  CSRF_COOKIE_SECURE: "{{ CREDENTIALS_CSRF_COOKIE_SECURE }}"
  USERNAME_REPLACEMENT_WORKER: "{{ CREDENTIALS_USERNAME_REPLACEMENT_WORKER }}"
  MEDIA_ROOT: '{{ CREDENTIALS_MEDIA_ROOT }}'
# See edx_django_service_automated_users for an example of what this should be
CREDENTIALS_AUTOMATED_USERS: {}
CREDENTIALS_CUSTOM_THEME_PACKAGE:
  - name: 'git+https://gitlab.raccoongang.com/edx/credentials-themes.git@0.2.0#egg=edx_credentials_themes==0.2.0'
    extra_args: '-e'

credentials_create_demo_data: false
CREDENTIALS_THEME_NAME: 'koa-rg'
# NOTE: These variables are only needed to create the demo site (e.g. for sandboxes)
CREDENTIALS_LMS_URL_ROOT: !!null
CREDENTIALS_DISCOVERY_API_URL:  !!null

CREDENTIALS_CSRF_COOKIE_SECURE: false

CREDENTIALS_ENABLE_NEWRELIC_DISTRIBUTED_TRACING: false

credentials_post_migrate_commands:
  - command: './manage.py create_or_update_site --site-id=1 --site-domain={{ CREDENTIALS_DOMAIN }} --site-name="Open edX" --platform-name="Open edX" --company-name="Open edX" --lms-url-root={{ CREDENTIALS_LMS_URL_ROOT }} --catalog-api-url={{ CREDENTIALS_DISCOVERY_API_URL }} --tos-url={{ CREDENTIALS_LMS_URL_ROOT }}/tos --privacy-policy-url={{ CREDENTIALS_LMS_URL_ROOT }}/privacy --homepage-url={{ CREDENTIALS_LMS_URL_ROOT }} --certificate-help-url={{ CREDENTIALS_LMS_URL_ROOT }}/faq --records-help-url={{ CREDENTIALS_LMS_URL_ROOT }}/faq --theme-name={{ CREDENTIALS_THEME_NAME }}'
    when: '{{ credentials_create_demo_data }}'
#default cronjob task. Warning - any of your tasks will override it!
credentials_cronjob_auto: 
  - script: |
      #!/usr/bin/env bash

      if ! test -x {{ COMMON_BIN_DIR }}/python.credentials -o -x {{ COMMON_BIN_DIR }}/python.edxapp ; then
        # for multi-instance installations: do nothing on non edxapp instances
        exit
      fi

      SHELL=/bin/bash
      CREDENTIALS_CFG={{ COMMON_CFG_DIR }}/credentials.yml
      LOG_FILE={{ COMMON_LOG_DIR }}/update_credentials/edx.log
      mkdir -p `dirname ${LOG_FILE}`
      exec &>> ${LOG_FILE}
      exec 2>&1
      export SHELL
      export CREDENTIALS_CFG

      if test -x {{ COMMON_BIN_DIR }}/python.credentials ; then
        sudo -Eu credentials {{ COMMON_APP_DIR }}/{{ credentials_service_name }}/venvs/credentials/bin/python {{ COMMON_APP_DIR }}/{{ credentials_service_name }}/credentials/manage.py copy_catalog --settings=credentials.settings.production
      else
        echo "credentials service not found" >&2
      fi
    name: "credentials copy catalog"
    filename: "update_credentials.sh"
    minute: "*/10"

# Remote config
CREDENTIALS_HERMES_ENABLED: "{{ COMMON_HERMES_ENABLED }}"

CREDENTIALS_DECRYPT_CONFIG_ENABLED: "{{ COMMON_DECRYPT_CONFIG_ENABLED }}"
CREDENTIALS_COPY_CONFIG_ENABLED: "{{ COMMON_COPY_CONFIG_ENABLED }}"
