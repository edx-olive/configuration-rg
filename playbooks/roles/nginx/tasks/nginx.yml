---
- name: Remove old nginx packages
  apt:
    name: nginx-common
    state: absent

- name: Add apt key
  apt_key:
    url: "http://nginx.org/keys/nginx_signing.key"
    state: present

- name: Add nginx repository
  apt_repository:
    repo: "{{ NGINX_APT_REPO }}"
    state: present

- name: Install the nginx package
  apt:
    name: nginx
    state: latest
    update_cache: yes

- name: Remove the default site
  file:
    path: /etc/nginx/sites-enabled/default
    state: absent
  notify: reload nginx

- name: Create nginx app and data dirs
  file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
  with_items:
    - { path: '{{ nginx_app_dir }}', owner: '{{ nginx_user }}', group: '{{ common_web_group }}' }
    - { path: '{{ nginx_sites_available_dir }}', owner: '{{ nginx_user }}', group: '{{ common_web_group }}' }
    - { path: '{{ nginx_sites_enabled_dir }}', owner: '{{ nginx_user }}', group: '{{ common_web_group }}' }
    - { path: '{{ nginx_conf_dir }}', owner: '{{ nginx_user }}', group: '{{ common_web_group }}' }
    - { path: '{{ nginx_data_dir }}', owner: '{{ common_web_user }}', group: '{{ nginx_user }}' }
    - { path: '{{ nginx_log_dir }}', owner: '{{ common_web_user }}', group: '{{ nginx_user }}' }
    - { path: '{{ nginx_server_static_dir }}', owner: '{{ common_web_user }}', group: '{{ nginx_user }}' }
  notify: restart nginx

- name: Define server configuration file and common nginx configuration
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
  with_items:
    - { src: 'etc/nginx/nginx.conf.j2', dest: '/etc/nginx/nginx.conf', group: '{{ common_web_user }}', mode: "0644" }
    - { src: 'edx/app/nginx/sites-available/maps.j2', dest: '{{ nginx_sites_available_dir }}/maps', group: 'root', mode: "0600" }
  notify: restart nginx

- name: Create robot rules
  template:
    src: "edx/app/nginx/robots.txt.j2"
    dest: "{{ nginx_app_dir }}/robots.txt"
    owner: root
    group: "{{ common_web_user }}"
    mode: 0644
  notify: reload nginx
  when: NGINX_ROBOT_RULES|length > 0

- name: Creating link for common nginx configuration
  file:
    src: "{{ nginx_sites_available_dir }}/{{ item }}"
    dest: "{{ nginx_sites_enabled_dir }}/{{ item }}"
    state: link
    owner: root
    group: root
  notify: reload nginx
  with_items:
    - "maps"

- name: Copying nginx configs for {{ nginx_sites }}
  template:
    src: "{{ nginx_template_dir }}/{{ item }}.j2"
    dest: "{{ nginx_sites_available_dir }}/{{ item }}"
    owner: root
    group: "{{ common_web_user }}"
    mode: "0640"
  when: item != ''
  with_items: "{{ nginx_sites }}"
  notify: reload nginx

- name: Creating nginx config links for {{ nginx_sites }}
  file:
    src: "{{ nginx_sites_available_dir }}/{{ item  }}"
    dest: "{{ nginx_sites_enabled_dir }}/{{ item }}"
    state: link
    owner: root
    group: root
  when:
    - item != ''
    - not nginx_skip_enable_sites
  with_items: "{{ nginx_sites }}"
  notify: reload nginx

- name: Copying nginx extra configs
  template:
    src: "{{ item }}"
    dest: "{{ nginx_sites_available_dir }}/{{ (item | basename).rstrip('.j2') }}"
    owner: root
    group: "{{ common_web_user }}"
    mode: "0640"
  with_items: "{{ nginx_extra_sites }}"
  notify: reload nginx

- name: Creating links for nginx extra configs
  file:
    src: "{{ nginx_sites_available_dir }}/{{ (item | basename).rstrip('.j2') }}"
    dest: "{{ nginx_sites_enabled_dir }}/{{ (item | basename).rstrip('.j2') }}"
    state: link
    owner: root
    group: root
  when: item != ''
  with_items: "{{ nginx_extra_sites }}"
  notify: reload nginx

- name: Copying custom nginx config
  template:
    src: "{{ item }}"
    dest: "{{ nginx_conf_dir }}/{{ (item | basename).rstrip('.j2') }}"
    owner: root
    group: "{{ common_web_user }}"
    mode: "0640"
  with_items: "{{ nginx_extra_configs }}"
  notify: reload nginx

- name: Copying nginx redirect configs for {{ nginx_redirects }}
  template:
    src: "{{ nginx_template_dir }}/nginx_redirect.j2"
    dest: "{{ nginx_sites_available_dir }}/{{ item.key }}"
    owner: root
    group: "{{ common_web_user }}"
    mode: "0640"
  with_dict: "{{ nginx_redirects }}"
  notify: reload nginx

- name: Creating nginx redirect links for {{ nginx_redirects }}
  file:
    src: "{{ nginx_sites_available_dir }}/{{ item.key  }}"
    dest: "{{ nginx_sites_enabled_dir }}/{{ item.key }}"
    state: link
    owner: root
    group: root
  with_dict: "{{ nginx_redirects }}"
  notify: reload nginx

- name: Copy NGINX maintenance page
  copy:
    src: "{{ NGINX_SERVER_HTML_MAINTENANCE_DIR }}/"
    dest: "{{ nginx_server_static_dir }}"
    owner: root
    group: "{{ common_web_user }}"
    mode: "0640"

- name: Copy static files
  copy:
    src: "{{ item }}"
    dest: "{{ nginx_server_static_dir }}"
    owner: "{{ common_web_user }}"
    group: "{{ common_web_user }}"
    mode: "0640"
  with_items: "{{ NGINX_SERVER_STATIC_FILES }}"

- name: Write out htpasswd file
  htpasswd:
    name: "{{ item.name }}"
    password: "{{ item.password }}"
    state: "{{ item.state  }}"
    path: "{{ nginx_htpasswd_file }}"
  with_items: "{{ NGINX_USERS }}"
  when: NGINX_CREATE_HTPASSWD_FILE | bool

- local_action:
    module: stat
    path: "{{ NGINX_SSL_CERTIFICATE }}"
  become: False
  register: ssl_cert

- local_action:
    module: stat
    path: "{{ NGINX_SSL_KEY }}"
  become: False
  register: ssl_key

- name: copy ssl cert
  copy:
    src: "{{ NGINX_SSL_CERTIFICATE }}"
    dest: "/etc/ssl/certs/"
    owner: root
    group: root
    mode: 0644
  when: ssl_cert.stat.exists and NGINX_ENABLE_SSL and NGINX_SSL_CERTIFICATE != 'ssl-cert-snakeoil.pem'

- name: copy ssl key
  copy:
    src: "{{ NGINX_SSL_KEY }}"
    dest: "/etc/ssl/private/"
    owner: root
    group: root
    mode: 0640
  when: ssl_key.stat.exists and NGINX_ENABLE_SSL and NGINX_SSL_KEY != 'ssl-cert-snakeoil.key'
  no_log: True

- name: Set up nginx access log rotation
  template:
    src: "etc/logrotate.d/edx_logrotate_nginx_access.j2"
    dest: "/etc/logrotate.d/nginx-access"
    owner: root
    group: root
    mode: 0644

- name: Set up nginx error log rotation
  template:
    src: "etc/logrotate.d/edx_logrotate_nginx_error.j2"
    dest: "/etc/logrotate.d/nginx-error"
    owner: root
    group: root
    mode: 0644

- name: Set up hard and soft limits
  template:
    src: "limits.j2"
    dest: "/etc/security/limits.d/nginx"
    owner: root
    group: root
    mode: 0644

- name: Create Diffie-Hellman parameters to prevent weak key exchange
  command: openssl dhparam -out "{{ NGINX_DH_PARAMS_PATH | basename }}" {{ NGINX_DH_KEYSIZE }}
  args:
    chdir: "{{ NGINX_DH_PARAMS_PATH | dirname }}"
    creates: "{{ NGINX_DH_PARAMS_PATH }}"

- name: Restrict permissions of DH parameters file
  file:
    path: "{{ NGINX_DH_PARAMS_PATH }}"
    owner: "root"
    group: "root"
    mode: 0600

- name: Removing default nginx config and restart (enabled)
  file:
    path: "{{ nginx_sites_enabled_dir }}/default"
    state: absent
  notify: reload nginx

- name: Restart or reload nginx if necessary
  meta: flush_handlers

- name: make sure nginx has started
  service:
    name: nginx
    state: started
