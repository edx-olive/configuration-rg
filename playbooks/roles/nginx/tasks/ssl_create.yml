---
- name: Create robot rules
  template:
    src: robots.txt.j2
    dest: "{{ nginx_app_dir }}/robots.txt"
    owner: root
    group: root
    mode: 0644
  when: NGINX_ROBOT_RULES|length > 0

- name: create nginx config in "{{ nginx_app_dir }}"
  template:
    src: edx-ssl.conf.j2
    owner: root
    group: root
    mode: 0644
    dest: "{{ nginx_config_path }}"
    force: yes

- name: create link for nginx config
  file:
    src: "{{ nginx_config_path }}"
    dest: "{{ nginx_sites_enabled_dir }}/{{ nginx_config }}"
    state: link
    owner: root
    group: root

- name: reload nginx
  service:
    name: nginx
    state: reloaded

- block: #=============Block for letsencrypt certificate=============
    - name: Register le_cert_exists for nginx_edx_config
      stat: path="/etc/letsencrypt/live/{{ EDXAPP_SITE_NAME }}/fullchain.pem"
      register: le_cert_exists1
      when: nginx_edx_config

    - name: Register le_cert_exists for non nginx_edx_config
      stat: path="/etc/letsencrypt/live/{{ NGINX_ADDITIONAL_SERVICES_CONFIG[0].server_name }}/fullchain.pem"
      register: le_cert_exists2
      when: not nginx_edx_config

    - name: Combine nginx_edx_config register
      set_fact:
        le_cert_exists: "{{ le_cert_exists1 if nginx_edx_config else le_cert_exists2 }}"

    - name: Installing certbot dependencies
      apt:
        name: "{{ le_packages }}"
        update_cache: True

    # https://certbot.eff.org/lets-encrypt/ubuntuxenial-other

    - name: Installing certbot via snap
      command: snap install --classic certbot

    # - name: Symlinking /snap/bin/certbot /usr/bin/certbot
      # file:
        # src: /snap/bin/certbot
        # dest: /usr/bin/certbot
        # state: link

    - name: Creating check directory for nginx
      file:
        path: "{{ letsencrypt_webroot }}"
        state: directory
        mode: 0755
        owner: www-data
        group: www-data

    - name: Compare LETSENCRYPT_MAIN_DOMAIN with LMS, CMS and PREVIEW
      set_fact:
        LETSENCRYPT_MAIN_DOMAIN: "{{ LETSENCRYPT_MAIN_DOMAIN|default([]) + [EDXAPP_LMS_SITE_NAME] + [EDXAPP_CMS_SITE_NAME] + [EDXAPP_PREVIEW_LMS_BASE]  }}"

    - name: Compare LETSENCRYPT_MAIN_DOMAIN with LETSENCRYPT_ADDITIONAL_DOMAIN
      set_fact:
        LETSENCRYPT_ALL_DOMAIN: "{{ LETSENCRYPT_MAIN_DOMAIN + LETSENCRYPT_ADDITIONAL_DOMAIN }}"

    - name: Set LETSENCRYPT_ALL_DOMAIN fact for non nginx_edx_config
      set_fact:
        LETSENCRYPT_ALL_DOMAIN: "{{ LETSENCRYPT_ADDITIONAL_DOMAIN }}"
      when: not nginx_edx_config

    - name: Requesting for LMS, CMS and LETSENCRYPT_ADDITIONAL_DOMAIN certificates
      command: certbot certonly --agree-tos --non-interactive --text --rsa-key-size 2048 --webroot -w /var/www/letsencrypt -d {{ LETSENCRYPT_ALL_DOMAIN|join(' -d ') }}  --register-unsafely-without-email --force-renewal
      when: le_cert_exists.stat.islnk is not defined

    - name: Create certbot log directory
      file:
        path: "/var/log/letsencrypt"
        state: directory
        owner: "root"
        group: "root"
        mode: 0700

    - name: Create logratate configuration for certbot logs
      template:
        src: "logrotate-letsencrypt.j2"
        dest: "/etc/logrotate.d/letsencrypt"

    - name: Add auto-renewal task in cron
      cron:
        name: "Automatic renewal letsencrypt certificate"
        minute: "1"
        hour: "1"
        month: "*"
        job: 'certbot renew --webroot -w {{ letsencrypt_webroot }} --post-hook "service nginx restart" >> /var/log/letsencrypt/crontab.log 2>&1'

    - name: set lms_ssl_certificate_path fact
      set_fact:
        nginx_letsencrypt: yes

  when: use_letsencrypt

- block: #=============Block for raccoongang ssl certificate=============
    - name: Create "{{ raccoongang_ssl_path }}"
      file:
        path: "{{ raccoongang_ssl_path }}"
        state: directory
        mode: 0700

    - name: raccoongang ssl crt and key
      copy:
        content: "{{ item.content }}"
        dest: "{{ raccoongang_ssl_path }}/{{ item.name }}"
      with_items:
        - name: 'raccoongang-ssl.crt'
          content: "{{ raccoongang_ssl_crt }}"
        - name: 'raccoongang-ssl.key'
          content: "{{ raccoongang_ssl_key }}"
      no_log: True

    - name: set lms_ssl_certificate_path fact
      set_fact:
        lms_ssl_certificate_path: "{{ raccoongang_ssl_path }}/raccoongang-ssl.crt"
        lms_ssl_certificate_key_path: "{{ raccoongang_ssl_path }}/raccoongang-ssl.key"
        cms_ssl_certificate_path: "{{ raccoongang_ssl_path }}/raccoongang-ssl.crt"
        cms_ssl_certificate_key_path: "{{ raccoongang_ssl_path }}/raccoongang-ssl.key"
        insights_ssl_certificate_path: "{{ raccoongang_ssl_path }}/raccoongang-ssl.crt"
        insights_ssl_certificate_key_path: "{{ raccoongang_ssl_path }}/raccoongang-ssl.key"
        analytics_api_ssl_certificate_path: "{{ raccoongang_ssl_path }}/raccoongang-ssl.crt"
        analytics_api_ssl_certificate_key_path: "{{ raccoongang_ssl_path }}/raccoongang-ssl.key"
  when: use_raccoongang_ssl


- block: #=================Block for create ssl configuration================
    - name: update nginx_ssl_template variable for create nginx ssl template
      set_fact:
        nginx_ssl_template: yes

    - name: create nginx ssl-config in "{{ nginx_app_dir }}"
      template:
        src: edx-ssl.conf.j2
        owner: root
        group: root
        mode: 0644
        dest: "{{ nginx_ssl_config_path }}"
        force: yes

    - name: remove link for nginx config if exist
      file:
        path: "{{ nginx_sites_enabled_dir }}/{{ nginx_config }}"
        state: absent

    - name: create link for nginx ssl-config
      file:
        src: "{{ nginx_ssl_config_path }}"
        dest: "{{ nginx_sites_enabled_dir }}/{{ nginx_ssl_config }}"
        state: link
        owner: root
        group: root

    - name: Create Diffie-Hellman parameters to prevent weak key exchange
      command: openssl dhparam -out "{{ NGINX_DH_PARAMS_PATH | basename }}" {{ NGINX_DH_KEYSIZE }}
      args:
        chdir: "{{ NGINX_DH_PARAMS_PATH | dirname }}"
        creates: "{{ NGINX_DH_PARAMS_PATH }}"


    - name: Restrict permissions of DH parameters file
      file:
        path: "{{ NGINX_DH_PARAMS_PATH }}"
        owner: "root"
        group: "root"
        mode: 0600
  when: use_raccoongang_ssl or use_letsencrypt or nginx_ssl_selfsigned

- name: test nginx config
  command: "/usr/sbin/nginx -t"
  register: nginx_test_result
  notify: reload nginx
